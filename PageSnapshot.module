<?php

/**
 * Return page in the state it was at the given time
 *
 * Original code for this module was posted by SteveB at the ProcessWire support forum:
 * http://processwire.com/talk/topic/2892-module-version-control-for-text-fields/?p=50438
 *
 * @copyright Copyright (c) 2014, Teppo Koivula & SteveB
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */
class PageSnapshot extends WireData implements Module {

    /**
     * Return information about this module (required)
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Page Snapshot',
            'summary' => 'Return page in the state it was at the given time.',
            'href' => 'http://modules.processwire.com/modules/version-control-for-text-fields/',
            'author' => 'Teppo Koivula, SteveB',
            'version' => 115,
            'singular' => true,
            'autoload' => true,
            'requires' => array(
                'VersionControl',
                'ProcessWire>=2.4.1',
            ),
        ); 
    }

    /**
     * Initialization function
     *
     * This function attachs required hooks.
     *
     */
    public function init() {
        // add new method snapshot to Page objects
        $this->addHook('Page::snapshot', $this, 'hookPageSnapshot');
    }

    /**
     * Return page in the state it was at given time
     * 
     * @param HookEvent $event
     * @return null|false
     */
    public function hookPageSnapshot(HookEvent $event) {

        $page = $event->object;
        $time = isset($event->arguments[0]) ? $event->arguments[0] : null;
        $revision_id = isset($event->arguments[1]) ? $event->arguments[1] : null;

        $data = $this->snapshot($page, $time, $revision_id);
        if (!$data) return false;

        $page->of(false);
        $filedata = array();
        foreach ($data as $key => $value) {
            if (is_array($value)) {
                foreach ($value as $subkey => $subvalue) {
                    list($id, $field, $property) = explode(".", $subkey);
                    $language = str_replace("data", "", $property);
                    if (!$language) $page->$key->get("id=$id")->$field = $subvalue;
                    else if ($language = $this->languages->get((int) $language)) {
                        $page->$key->get("id=$id")->$field->setLanguageValue($language, $subvalue);
                    }
                }
            } else {
                list($field, $count, $property) = array_pad(explode(".", $key), 3, 0);
                if ($property) {
                    // multipart property (n.data), i.e. file or image field
                    if (!isset($filedata[$field])) $filedata[$field] = array();
                    $value = json_decode($value, true);
                    $value['filename'] = $this->modules->VersionControl->path . $value['filename'];
                    $filedata[$field][$count] = $value;
                } else {
                    // "regular" property (data, data1001 etc.)
                    $property = $count;
                    $language = str_replace("data", "", $property);
                    if (!$language) $page->$field = $value;
                    else if ($language = $this->languages->get((int) $language)) {
                        $page->$field->setLanguageValue($language, $value);
                    }
                }
            }
        }
        if (count($filedata)) {
            // filedata comes in chunks and needs to be processed in two steps
            $this->addHook('Pagefile::url', $this, 'hookPagefileUrl');
            $this->addHook('Pagefile::filename', $this, 'hookPagefileFilename');
            $this->addHookBefore('Pagefile::install', $this, 'hookPagefileInstall');
            foreach ($filedata as $field => $items) {
                // @todo handle changed template (not the only place that needs this though..)
                ksort($items);
                $page->get($field)->deleteAll();
                foreach ($items as $item) {
                    $page->$field = $item['filename'];
                    $page->$field->last()->description = $item['description'];
                    $page->$field->last()->modified = $item['modified'];
                    $page->$field->last()->created = $item['created'];
                    if (isset($item['tags'])) $page->$field->last()->tags = $item['tags'];
                    $page->$field->last()->_custom_url = $this->modules->VersionControl->url . $page->$field->last()->basename;
                    $page->$field->last()->_custom_filename = $item['filename'];
                }
            }
        }
        $page->of(true);
        
    }

    /**
     * Prevent installing Pagefile if path is that of ProcessVersionControl
     *
     * @param HookEvent $event
     */
    public function hookPagefileInstall(HookEvent $event) {
        if (strpos($event->arguments[0], $this->modules->VersionControl->path) === 0) {
            $event->object->basename = $event->arguments[0];
            $event->replace = true;
        }
    }

    /**
     * Override Pageimage / Pagefile URL with custom one
     *
     * @param HookEvent $event
     */
    public function hookPagefileUrl(HookEvent $event) {
        if ($event->object->_custom_url) $event->return = $event->object->_custom_url;
    }

    /**
     * Override Pageimage / Pagefile filename with custom one
     *
     * @param HookEvent $event
     */
    public function hookPagefileFilename(HookEvent $event) {
        if ($event->object->_custom_filename) $event->return = $event->object->_custom_filename;
    }

    /**
     * Return array of contents of given page at specific time or revision
     * 
     * @param Page $page
     * @param mixed $time
     * @param null|int $revision_id
     * @return array
     */
    public function snapshot(Page $page, $time = null, $revision_id = null) {   

        if (!is_integer($time)) $time = strtotime($time);

        // revision info
        if ($revision_id) {
            if (!is_integer($revision_id)) throw new WireException("Revision ID must be an integer");
            $sql = "SELECT timestamp FROM " . VersionControl::REVISIONS_TABLE_NAME . " WHERE id = $revision_id";
            $result = $this->db->query($sql);
            $revision = mysqli_fetch_assoc($result);
            if (!$revision) throw new WireException("Revision doesn't exist: $revision_id");
        }

        // default value for time
        if (empty($time)) $time = $revision_id ? strtotime($revision['timestamp']) : time();
        
        // include repeater pages
        $pages_id = $page->id;
        if ($this->modules->isInstalled('FieldtypeRepeater')) {
            $pages_id = array($pages_id);
            foreach ($page->fields as $field) {
                if ($field->type instanceof FieldtypeRepeater) {
                    $subfields = $this->templates->get($field->template_id)->versionControlFields;
                    if (count($subfields)) {
                        foreach ($page->$field as $repeater_page) {
                            $pages_id[] = $repeater_page;
                        }
                    }
                }
            }
            $pages_id = implode($pages_id, ",");
        }

        // find values
        $t1 = VersionControl::REVISIONS_TABLE_NAME;
        $t2 = VersionControl::DATA_TABLE_NAME;
        $where = $revision_id ? "t1.id = $revision_id AND " : "";
        $sql = "
        SELECT t1.pages_id, t2.fields_id, t2.property, t2.data
        FROM (
            SELECT MAX(t1.id) id, t1.pages_id, t2.fields_id
            FROM $t1 AS t1, $t2 AS t2
            WHERE {$where}t1.pages_id IN ($pages_id) AND t1.timestamp <= FROM_UNIXTIME($time) AND t2.revisions_id = t1.id
            GROUP BY t1.pages_id, t2.fields_id
        ) AS t1
        INNER JOIN $t2 AS t2
        ON t2.revisions_id = t1.id AND t2.fields_id = t1.fields_id
        ";
        $result = $this->db->query($sql);

        // generate data (associative array)
        $data = array();
        while ($row = mysqli_fetch_assoc($result)) {
            $field = $this->fields->get($row['fields_id']);
            if ($row['pages_id'] != $page->id) {
                $repeater_page = $this->pages->get($row['pages_id']);
                if ($repeater_page->id) {
                    $grandparent = $repeater_page->parent()->parent()->name;
                    if (strpos($grandparent, "for-field-") === 0) {
                        $repeater_field = $this->fields->get((int) substr($grandparent, 10))->name;
                        $data[$repeater_field][$repeater_page.".".$field.".".$row['property']] = $row['data'];
                    }
                }
            } else {
                $data[$field.".".$row['property']] = $row['data'];
            }
        }

        return $data;

    }

}